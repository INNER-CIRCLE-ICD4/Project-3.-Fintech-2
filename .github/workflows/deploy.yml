name: EasyPay Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 수동 실행 가능

env:
  JAVA_VERSION: '21'

jobs:
  # 배포 전 최종 테스트
  pre-deploy-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Run full test suite
      run: ./gradlew test
      
    - name: Build application
      run: ./gradlew build -x test
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: easypay-build
        path: build/libs/*.jar

  # 보안 스캔 (배포 전 필수)
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Run OWASP dependency check
      run: ./gradlew dependencyCheckAnalyze
      
    - name: Upload security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-results
        path: build/reports/dependency-check/
        retention-days: 30

  # Docker 이미지 빌드 및 푸시
  docker-build:
    runs-on: ubuntu-latest
    needs: [pre-deploy-test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/easypay:latest
          ${{ secrets.DOCKER_USERNAME }}/easypay:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/easypay:main
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 배포 완료 알림
  deploy-notification:
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - name: Deploy Summary
      run: |
        echo "🚀 EasyPay Deployment Completed!"
        echo "📦 Docker Image: ${{ secrets.DOCKER_USERNAME }}/easypay:latest"
        echo "🔒 Security Scan: OWASP dependency check completed"
        echo "🔗 GitHub Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "📊 Build Artifacts: Available in artifacts"
        echo "✅ Ready for production deployment!" 