name: EasyPay Development CI/CD

on:
  push:
    branches: [ main, dahee ]
  pull_request:
    branches: [ main, dahee ]

env:
  JAVA_VERSION: '21'
  GRADLE_VERSION: '8.5'

jobs:
  # 테스트 및 빌드
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: ${{ env.GRADLE_VERSION }}
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Run tests
      run: ./gradlew test
      
    - name: Build application
      run: ./gradlew build -x test
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: easypay-build
        path: build/libs/*.jar
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: build/test-results/
        retention-days: 30

  # 코드 품질 검사
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: ${{ env.GRADLE_VERSION }}
        
    - name: Run SpotBugs
      run: ./gradlew spotbugsMain
      
    - name: Run PMD
      run: ./gradlew pmdMain
      
    - name: Upload SpotBugs results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: spotbugs-results
        path: build/reports/spotbugs/
        retention-days: 30
        
    - name: Upload PMD results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pmd-results
        path: build/reports/pmd/
        retention-days: 30

  # 보안 검사
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: ${{ env.GRADLE_VERSION }}
        
    - name: Run OWASP dependency check
      run: ./gradlew dependencyCheckAnalyze
      
    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-results
        path: build/reports/dependency-check/
        retention-days: 30

  # Docker 이미지 빌드 및 푸시
  docker-build:
    runs-on: ubuntu-latest
    needs: [test-and-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/easypay:latest
          ${{ secrets.DOCKER_USERNAME }}/easypay:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/easypay:dev
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 개발 환경 배포 알림
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [test-and-build, docker-build]
    
    steps:
    - name: Notify deployment
      run: |
        echo "✅ EasyPay Development Build Completed!"
        echo "📦 Docker Image: ${{ secrets.DOCKER_USERNAME }}/easypay:latest"
        echo "🔗 GitHub Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "📊 Test Results: Available in artifacts" 